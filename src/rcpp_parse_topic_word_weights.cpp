#include <Rcpp.h>
#include <iostream>
#include <fstream>
#include <unordered_map>

//' Rcpp Parse Topic Word Weights File --topic-word-weights
//'
//' Parses the file generated by Mallet with the --topic-word-weights flag.
//' The format is a whitespace delimited file, where each line has: topic (starting at 0) term weight.
//' Refer to the README for this package for more information about the topic-word-weights file.
//' Note that the weight seems to be count + beta parameter.
//'
//' @param fpath A string specifying path to the word-topic-counts text file.
//' @return topicterms A matrix with topic terms, terms as colnames.
//' @export
// [[Rcpp::export]]
Rcpp::NumericMatrix rcpp_parse_topic_word_weights (std::string fpath)
{

    std::unordered_map <std::string, int> terms_map;
    int topic;
    double weight;
    std::string term;
    int index = 0;
    int line_index = 0;

    int ntopics = 0;
    int past = -1;

    Rcpp::StringVector terms;

    std::ifstream infile;
    infile.open(fpath);
    while (infile >> topic >> term >> weight)
    {
	if (topic == 0)
	{
	    terms_map.insert (std::make_pair(term,index)); 
	    terms.push_back(term);
	    index++;
	}

	if (past != topic)
	{
	    ntopics++;
	    past = topic;
	}
    }
    infile.close();
    infile.open(fpath);


    Rcpp::NumericMatrix results (ntopics, index);

    while (infile >> topic >> term >> weight)
    {
	if (line_index % 100000 == 0 && line_index != 0)
	    Rcpp::Rcout << std::setprecision(3) << (double)line_index / 1000000 << " million lines" << std::flush << std::endl;
	results(topic, terms_map[term]) = weight;
    } // while infile >> topic ...

    Rcpp::colnames(results) = terms;

    return results;
}// main
