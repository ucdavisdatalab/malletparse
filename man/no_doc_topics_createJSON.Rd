% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/no_doc_topics_createJSON.R
\name{no_doc_topics_createJSON}
\alias{no_doc_topics_createJSON}
\title{Create the JSON object to read into the javascript visualization}
\usage{
no_doc_topics_createJSON(phi = matrix(), topic.frequency,
  vocab = character(), term.frequency = integer(), R = 30,
  lambda.step = 0.01, mds.method = jsPCA, cluster,
  plot.opts = list(xlab = "PC1", ylab = "PC2"), reorder.topics = FALSE,
  ...)
}
\arguments{
\item{phi}{matrix, with each row containing the distribution over terms 
for a topic, with as many rows as there are topics in the model, and as 
many columns as there are terms in the vocabulary.}

\item{topic.frequency}{A numeric vector of the topic frequencies can be calculated with rcpp_parse_doc_topics.}

\item{vocab}{character vector of the terms in the vocabulary (in the same
order as the columns of \code{phi}). Each term must have at least one
character.}

\item{term.frequency}{integer vector containing the frequency of each term 
in the vocabulary.}

\item{R}{integer, the number of terms to display in the barcharts
of the interactive viz. Default is 30. Recommended to be roughly
between 10 and 50.}

\item{lambda.step}{a value between 0 and 1. 
Determines the interstep distance in the grid of lambda 
values over which to iterate when computing relevance.
Default is 0.01. Recommended to be between 0.01 and 0.1.}

\item{mds.method}{a function that takes \code{phi} as an input and outputs
a K by 2 data.frame (or matrix). The output approximates the distance
between topics. See \link{jsPCA} for details on the default method.}

\item{cluster}{a cluster object created from the \link{parallel} package. 
If supplied, computations are performed using \link{parLapply} instead
of \link{lapply}.}

\item{plot.opts}{a named list used to customize various plot elements. 
By default, the x and y axes are labeled "PC1" and "PC2" 
(principal components 1 and 2), since \link{jsPCA} is the default
scaling method.}

\item{reorder.topics}{whether to re-order the K topics in order 
of decreasing proportion.}

\item{...}{not currently used.}
}
\value{
A string containing JSON content which can be written to a file 
or feed into \link{serVis} for easy viewing/sharing. One element of this 
string is the new ordering of the topics.
}
\description{
This function creates the JSON object that feeds the visualization template for the LDAvis package visualization. 
It is a modified version of the one from the LDAvis package that does not use the document topics matrix to calculate the topic frequencies,
instead the topic frequencies are passed as an argument.
For a more detailed overview of LDAvis, 
see \code{vignette("details", package = "LDAvis")}
}
\details{
A modified version of LDAvis createJSON that doesn't compute the topic frequenices from doc topics. 
Instead it reads them in as an argument. The main computation is to loop through the topics and through the
grid of lambda values (determined by \code{lambda.step})
to compute the \code{R} most 
\emph{relevant} terms for each topic and value of lambda.
}
\references{
Sievert, C. and Shirley, K. (2014) \emph{LDAvis: A Method for
Visualizing and Interpreting Topics}, ACL Workshop on Interactive 
Language Learning, Visualization, and Interfaces.
\url{http://nlp.stanford.edu/events/illvi2014/papers/sievert-illvi2014.pdf}
}
